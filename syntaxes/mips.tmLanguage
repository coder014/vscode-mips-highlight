<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>fileTypes</key>
    <array>
      <string>S</string>
      <string>s</string>
      <string>mips</string>
      <string>asm</string>
    </array>
    <key>keyEquivalent</key>
    <string>^~M</string>
    <key>name</key>
    <string>MIPS Assembler</string>
    <key>patterns</key>
    <array>

      <dict>
        <key>comment</key>
        <string>ok actually this are instructions, but one also could call them funtionsâ€¦</string>
        <key>match</key>
        <string>\b(mul|abs|div|divu|mulo|mulou|neg|negu|not|rem|remu|rol|ror|li|seq|sge|sgeu|sgt|sgtu|sle|sleu|sne|b|beqz|bge|bgeu|bgt|bgtu|ble|bleu|blt|bltu|bnez|la|ld|ulh|ulhu|ulw|sd|ush|usw|move|mfc1\.d|l\.d|l\.s|s\.d|s\.s)\b</string>
        <key>name</key>
        <string>support.function.pseudo.mips</string>
      </dict>

      <dict>
        <key>match</key>
        <string>\b(abs\.d|abs\.s|add|add\.d|add\.s|addi|addiu|addu|and|andi|bc1f|bc1t|beq|bgez|bgezal|bgtz|blez|bltz|bltzal|bne|break|c\.eq\.d|c\.eq\.s|c\.le\.d|c\.le\.s|c\.lt\.d|c\.lt\.s|ceil\.w\.d|ceil\.w\.s|clo|clz|cvt\.d\.s|cvt\.d\.w|cvt\.s\.d|cvt\.s\.w|cvt\.w\.d|cvt\.w\.s|div|div\.d|div\.s|divu|ehb|eret|floor\.w\.d|floor\.w\.s|j|jal|jalr|jr|lb|lbu|lh|lhu|ll|lui|lw|lwc1|lwl|lwr|madd|maddu|mfc0|mfc1|mfhi|mflo|mov\.d|mov\.s|movf|movf\.d|movf\.s|movn|movn\.d|movn\.s|movt|movt\.d|movt\.s|movz|movz\.d|movz\.s|msub|mtc0|mtc1|mthi|mtlo|mul|mul\.d|mul\.s|mult|multu|neg\.d|neg\.s|nop|nor|or|ori|round\.w\.d|round\.w\.s|sb|sc|sdc1|sh|sll|sllv|slt|slti|sltiu|sltu|sqrt\.d|sqrt\.s|sra|srav|srl|srlv|sub|subi|sub\.d|sub\.s|subu|sw|swc1|swl|swr|syscall|teq|teqi|tge|tgei|tgeiu|tgeu|tlbp|tlbr|tlbwi|tlbwr|tlt|tlti|tltiu|tltu|trunc\.w\.d|trunc\.w\.s|xor|xori)\b</string>
        <key>name</key>
        <string>support.function.mips</string>
      </dict>

      <dict>
        <key>match</key>
        <string>\.(ascii|asciiz|byte|data|double|float|half|kdata|ktext|space|text|word|set\s*(noat|at|noreorder|reorder))\b</string>
        <key>name</key>
        <string>storage.type.mips</string>
      </dict>
      <dict>
        <key>match</key>
        <string>\.(align|extern|globl|type|ent|end|frame|size)\b</string>
        <key>name</key>
        <string>storage.modifier.mips</string>
      </dict>
      <dict>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.label.mips</string>
          </dict>
        </dict>
        <key>match</key>
        <string>\b([A-Za-z0-9_]+):</string>
        <key>name</key>
        <string>meta.function.label.mips</string>
      </dict>
      <dict>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.variable.mips</string>
          </dict>
        </dict>
        <key>match</key>
        <string>(\$)(0|[2-9]|1[0-9]|2[0-5]|2[89]|3[0-1])\b</string>
        <key>name</key>
        <string>variable.other.register.usable.by-number.mips</string>
      </dict>
      <dict>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.variable.mips</string>
          </dict>
        </dict>
        <key>match</key>
        <string>\b(zero|v[01]|a[0-3]|t[0-9]|s[0-8]|gp|sp|fp|ra)\b</string>
        <key>name</key>
        <string>variable.other.register.usable.by-name.mips</string>
      </dict>
      <dict>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.variable.mips</string>
          </dict>
        </dict>
        <key>match</key>
        <string>\b(at|k[01])\b</string>
        <key>name</key>
        <string>variable.other.register.reserved.by-name.mips</string>
      </dict>
      <dict>
        <key>match</key>
        <string>\bCP0_[A-Z]+\b</string>
        <key>name</key>
        <string>variable.coprocessor.register.by-name.mips</string>
      </dict>
      <dict>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.variable.mips</string>
          </dict>
        </dict>
        <key>match</key>
        <string>(\$)(1|2[67])\b</string>
        <key>name</key>
        <string>variable.other.register.reserved.by-number.mips</string>
      </dict>
      <dict>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.variable.mips</string>
          </dict>
        </dict>
        <key>match</key>
        <string>\bf([0-9]|1[0-9]|2[0-9]|3[0-1])\b</string>
        <key>name</key>
        <string>variable.other.register.usable.floating-point.mips</string>
      </dict>
      <dict>
        <key>match</key>
        <string>\b\d+\.\d+\b</string>
        <key>name</key>
        <string>constant.numeric.float.mips</string>
      </dict>
      <dict>
        <key>match</key>
        <string>\b(\d+|0(x|X)[a-fA-F0-9]+)\b</string>
        <key>name</key>
        <string>constant.numeric.integer.mips</string>
      </dict>
      <dict>
        <key>begin</key>
        <string>"</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.begin.mips</string>
          </dict>
        </dict>
        <key>end</key>
        <string>"</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.end.mips</string>
          </dict>
        </dict>
        <key>name</key>
        <string>string.quoted.double.mips</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\\[rnt\\"]</string>
            <key>name</key>
            <string>constant.character.escape.mips</string>
          </dict>
        </array>
      </dict>
      <dict>
        <key>begin</key>
        <string>'</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.begin.mips</string>
          </dict>
        </dict>
        <key>end</key>
        <string>'</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.end.mips</string>
          </dict>
        </dict>
        <key>name</key>
        <string>string.quoted.single.mips</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\\[rnt\\"]</string>
            <key>name</key>
            <string>constant.character.escape.mips</string>
          </dict>
        </array>
      </dict>

      <!-- multiline command -->
      <dict>
        <key>begin</key>
        <string>\/\*</string>
        <key>end</key>
        <string>\*\/</string>
        <key>name</key>
        <string>comment.block</string>
      </dict>

      <!-- single command -->
      <dict>
        <key>begin</key>
        <string>\/\/</string>
        <key>end</key>
        <string>\n</string>
        <key>name</key>
        <string>comment.line.double-slash</string>
      </dict>
      <!-- preprocessors from C, borrowed from https://github.com/kodLite/cppStartingKit/blob/master/C%2B%2B.tmLanguage -->
      <dict>
        <key>begin</key>
        <string>(?x)
          ^\s*\#\s*(define)\s+             # define
          ((?&lt;id&gt;[a-zA-Z_][a-zA-Z0-9_]*))  # macro name
          (?:                              # and optionally:
          (\()                         # an open parenthesis
          (
          \s* \g&lt;id&gt; \s*       # first argument
          ((,) \s* \g&lt;id&gt; \s*)*  # additional arguments
          (?:\.\.\.)?          # varargs ellipsis?
          )
          (\))                         # a close parenthesis
          )?
        </string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.import.define.c</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.preprocessor.c</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.parameters.c</string>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>variable.parameter.preprocessor.c</string>
          </dict>
          <key>7</key>
          <dict>
            <key>name</key>
            <string>punctuation.separator.parameters.c</string>
          </dict>
          <key>8</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.parameters.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=(?://|/\*))|$</string>
        <key>name</key>
        <string>meta.preprocessor.macro.c</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?&gt;\\\s*\n)</string>
            <key>name</key>
            <string>punctuation.separator.continuation.c</string>
          </dict>
          <dict>
            <key>include</key>
            <string>$base</string>
          </dict>
        </array>
      </dict>
      <!-- Meta Preprocessor Diagnostic - C -->
      <dict>
        <key>begin</key>
        <string>^\s*#\s*(error|warning)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.import.error.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>$</string>
        <key>name</key>
        <string>meta.preprocessor.diagnostic.c</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?&gt;\\\s*\n)</string>
            <key>name</key>
            <string>punctuation.separator.continuation.c</string>
          </dict>
        </array>
      </dict>
      <!-- Function Macros - MIPS -->
      <dict>
        <key>begin</key>
        <string>^\s*(NESTED|END|EXPORT|FEXPORT)\(\s*(\w+)\s*(?:,\s*\w+\s*)*\)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.function.macro.mips</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>entity.name.function.macro.mips</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\s*$</string>
        <key>name</key>
        <string>meta.function.macro.c</string>
      </dict>
      <!-- Meta Preprocessor Include - C -->
      <dict>
        <key>begin</key>
        <string>^\s*#\s*(include|import)\b\s+</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.import.include.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=(?://|/\*))|$</string>
        <key>name</key>
        <string>meta.preprocessor.c.include</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?&gt;\\\s*\n)</string>
            <key>name</key>
            <string>punctuation.separator.continuation.c</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>"</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>"</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.c</string>
              </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.double.include.c</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>&lt;</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.c</string>
              </dict>
            </dict>
            <key>end</key>
            <string>&gt;</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.c</string>
              </dict>
            </dict>
            <key>name</key>
            <string>string.quoted.other.lt-gt.include.c</string>
          </dict>
        </array>
      </dict>
      <!-- Meta Preprocessor - C -->
      <dict>
        <key>begin</key>
        <string>^\s*#\s*(define|defined|elif|else|if|ifdef|ifndef|line|pragma|undef|endif)\b</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.import.c</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=(?://|/\*))|$</string>
        <key>name</key>
        <string>meta.preprocessor.c</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?&gt;\\\s*\n)</string>
            <key>name</key>
            <string>punctuation.separator.continuation.c</string>
          </dict>
        </array>
      </dict>
      <dict>
        <key>begin</key>
        <string>(^[ \t]+)?(?=#)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.whitespace.comment.leading.mips</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?!\G)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>#|(\/\/)</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.mips</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\n</string>
            <key>name</key>
            <string>comment.line.number-sign.mips</string>
          </dict>
        </array>
      </dict>
    </array>
    <key>scopeName</key>
    <string>source.mips</string>
    <key>uuid</key>
    <string>3E91326D-0A12-4348-896E-E9F0A1B7D11A</string>
  </dict>
</plist>
